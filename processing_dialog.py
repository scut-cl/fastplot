# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\hp\Desktop\srp\fastplot\project\main_demo\code\ui\processing_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from typing import Tuple
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QDialog
from utils.utils import data_obtain


class Ui_Single_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(414, 366)
        self.groupBox_3 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_3.setGeometry(QtCore.QRect(7, 7, 401, 351))
        self.groupBox_3.setObjectName("groupBox_3")
        self.stackedWidget = QtWidgets.QStackedWidget(self.groupBox_3)
        self.stackedWidget.setGeometry(QtCore.QRect(10, 20, 381, 321))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.groupBox_4 = QtWidgets.QGroupBox(self.page)
        self.groupBox_4.setGeometry(QtCore.QRect(0, 0, 381, 141))
        self.groupBox_4.setObjectName("groupBox_4")
        self.indexRadioButton = QtWidgets.QRadioButton(self.groupBox_4)
        self.indexRadioButton.setGeometry(QtCore.QRect(30, 20, 115, 19))
        self.indexRadioButton.setWhatsThis("")
        self.indexRadioButton.setObjectName("indexRadioButton")
        self.linearRadioButton = QtWidgets.QRadioButton(self.groupBox_4)
        self.linearRadioButton.setGeometry(QtCore.QRect(30, 50, 115, 19))
        self.linearRadioButton.setChecked(True)
        self.linearRadioButton.setObjectName("linearRadioButton")
        self.logarithmRadioButton = QtWidgets.QRadioButton(self.groupBox_4)
        self.logarithmRadioButton.setGeometry(QtCore.QRect(30, 80, 115, 19))
        self.logarithmRadioButton.setObjectName("logarithmRadioButton")
        self.polynomialRadioButton = QtWidgets.QRadioButton(self.groupBox_4)
        self.polynomialRadioButton.setGeometry(QtCore.QRect(150, 20, 115, 19))
        self.polynomialRadioButton.setObjectName("polynomialRadioButton")
        self.orderSpinBox = QtWidgets.QSpinBox(self.groupBox_4)
        self.orderSpinBox.setGeometry(QtCore.QRect(320, 20, 46, 22))
        self.orderSpinBox.setMinimum(2)
        self.orderSpinBox.setMaximum(5)
        self.orderSpinBox.setObjectName("orderSpinBox")
        self.powerRadioButton = QtWidgets.QRadioButton(self.groupBox_4)
        self.powerRadioButton.setGeometry(QtCore.QRect(150, 50, 115, 19))
        self.powerRadioButton.setObjectName("powerRadioButton")
        self.movingRadioButton = QtWidgets.QRadioButton(self.groupBox_4)
        self.movingRadioButton.setGeometry(QtCore.QRect(150, 80, 115, 19))
        self.movingRadioButton.setObjectName("movingRadioButton")
        self.orderLabel = QtWidgets.QLabel(self.groupBox_4)
        self.orderLabel.setEnabled(True)
        self.orderLabel.setGeometry(QtCore.QRect(281, 20, 41, 21))
        self.orderLabel.setObjectName("orderLabel")
        self.cycleSpinBox = QtWidgets.QSpinBox(self.groupBox_4)
        self.cycleSpinBox.setGeometry(QtCore.QRect(320, 80, 46, 22))
        self.cycleSpinBox.setMinimum(2)
        self.cycleSpinBox.setObjectName("cycleSpinBox")
        self.cycleLabel = QtWidgets.QLabel(self.groupBox_4)
        self.cycleLabel.setGeometry(QtCore.QRect(280, 80, 41, 21))
        self.cycleLabel.setObjectName("cycleLabel")
        self.otherRadioButton = QtWidgets.QRadioButton(self.groupBox_4)
        self.otherRadioButton.setGeometry(QtCore.QRect(30, 110, 115, 19))
        self.otherRadioButton.setObjectName("otherRadioButton")
        self.otherComboBox = QtWidgets.QComboBox(self.groupBox_4)
        self.otherComboBox.setGeometry(QtCore.QRect(140, 110, 161, 20))
        self.otherComboBox.setWhatsThis("")
        self.otherComboBox.setAccessibleDescription("")
        self.otherComboBox.setFrame(True)
        self.otherComboBox.setObjectName("otherComboBox")
        self.groupBox_5 = QtWidgets.QGroupBox(self.page)
        self.groupBox_5.setGeometry(QtCore.QRect(0, 150, 381, 141))
        self.groupBox_5.setObjectName("groupBox_5")
        self.label_3 = QtWidgets.QLabel(self.groupBox_5)
        self.label_3.setGeometry(QtCore.QRect(30, 30, 41, 21))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox_5)
        self.label_4.setGeometry(QtCore.QRect(30, 60, 41, 21))
        self.label_4.setObjectName("label_4")
        self.rightDoubleSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_5)
        self.rightDoubleSpinBox.setGeometry(QtCore.QRect(80, 30, 70, 22))
        self.rightDoubleSpinBox.setObjectName("rightDoubleSpinBox")
        self.leftDoubleSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_5)
        self.leftDoubleSpinBox.setGeometry(QtCore.QRect(80, 60, 70, 22))
        self.leftDoubleSpinBox.setObjectName("leftDoubleSpinBox")
        self.label_5 = QtWidgets.QLabel(self.groupBox_5)
        self.label_5.setGeometry(QtCore.QRect(170, 30, 41, 21))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox_5)
        self.label_6.setGeometry(QtCore.QRect(170, 60, 41, 21))
        self.label_6.setObjectName("label_6")
        self.interceptCheckBox = QtWidgets.QCheckBox(self.groupBox_5)
        self.interceptCheckBox.setGeometry(QtCore.QRect(30, 100, 91, 19))
        self.interceptCheckBox.setObjectName("interceptCheckBox")
        self.interceptLineEdit = QtWidgets.QLineEdit(self.groupBox_5)
        self.interceptLineEdit.setGeometry(QtCore.QRect(140, 100, 71, 21))
        self.interceptLineEdit.setInputMask("")
        self.interceptLineEdit.setObjectName("interceptLineEdit")
        self.reverseXYCheckBox = QtWidgets.QCheckBox(self.groupBox_5)
        self.reverseXYCheckBox.setGeometry(QtCore.QRect(250, 30, 91, 19))
        self.reverseXYCheckBox.setObjectName("reverseXYCheckBox")
        self.sortCheckBox = QtWidgets.QCheckBox(self.groupBox_5)
        self.sortCheckBox.setGeometry(QtCore.QRect(250, 70, 91, 19))
        self.sortCheckBox.setChecked(True)
        self.sortCheckBox.setObjectName("sortCheckBox")
        self.fittingPushButton = QtWidgets.QPushButton(self.page)
        self.fittingPushButton.setGeometry(QtCore.QRect(310, 300, 71, 21))
        self.fittingPushButton.setObjectName("fittingPushButton")
        self.stackedWidget.addWidget(self.page)
        
        func_list = ["y=a*b^x+c", "y=a*sin(k*x+b)+c", "y=a*cos(k*x+b)+c"]
        self.otherComboBox.addItems(func_list)

        self.retranslateUi(Dialog)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.groupBox_3.setTitle(_translate("Dialog", "参数选择"))
        self.groupBox_4.setTitle(_translate("Dialog", "拟合选项"))
        self.indexRadioButton.setToolTip(_translate("Dialog", "y=a*exp(b*x)"))
        self.indexRadioButton.setText(_translate("Dialog", "指数拟合"))
        self.linearRadioButton.setToolTip(_translate("Dialog", "y=a*x+b"))
        self.linearRadioButton.setText(_translate("Dialog", "线性拟合"))
        self.logarithmRadioButton.setToolTip(_translate("Dialog", "y=a*ln(x)+b"))
        self.logarithmRadioButton.setText(_translate("Dialog", "对数拟合"))
        self.polynomialRadioButton.setText(_translate("Dialog", "多项式拟合"))
        self.powerRadioButton.setToolTip(_translate("Dialog", "y=a*x^b"))
        self.powerRadioButton.setText(_translate("Dialog", "乘幂拟合"))
        self.movingRadioButton.setToolTip(_translate("Dialog", "移动平均"))
        self.movingRadioButton.setText(_translate("Dialog", "移动平均"))
        self.orderLabel.setText(_translate("Dialog", "阶数"))
        self.cycleLabel.setText(_translate("Dialog", "周期"))
        self.otherRadioButton.setText(_translate("Dialog", "其他方式"))
        self.otherComboBox.setToolTip(_translate("Dialog", "x为自变量, y为因变量"))
        self.groupBox_5.setTitle(_translate("Dialog", "趋势选项"))
        self.label_3.setText(_translate("Dialog", "前推"))
        self.label_4.setText(_translate("Dialog", "后推"))
        self.label_5.setText(_translate("Dialog", "单位"))
        self.label_6.setText(_translate("Dialog", "单位"))
        self.interceptCheckBox.setText(_translate("Dialog", "设置截距"))
        self.reverseXYCheckBox.setText(_translate("Dialog", "反转XY轴"))
        self.sortCheckBox.setText(_translate("Dialog", "X从小到大"))
        self.fittingPushButton.setText(_translate("Dialog", "应用"))


class Single_dialog(QDialog, Ui_Single_Dialog):
    """拟合参数对话框"""

    def __init__(self,parent=None) -> Tuple:

        super(Single_dialog, self).__init__(parent)
        self._init_parms()
        self.setupUi(self)
        self.widget_vailable()
        self.widget_action()

        self.exec_()   
    
    def _init_parms(self):
        """初始化参数"""
        
        self.fitting_method = 'linear'
        self.right_extend = 0
        self.left_extend = 0
        self.reverse_aixs = None
        self.sort_data = True
        self.intercept_set = None
        self.data = data_obtain() #获取数据
        self.intercept = 0

    def widget_action(self):
        '''控件事件'''       
        self.fittingPushButton.clicked.connect(self.apply_params)

 
    def apply_params(self):
        """获取绘图参数"""
    
        if self.indexRadioButton.isChecked():
            self.fitting_method = 'index'
        if self.linearRadioButton.isChecked():
            self.fitting_method = 'linear'
        if self.logarithmRadioButton.isChecked():
            self.fitting_method = 'log'
        if self.polynomialRadioButton.isChecked():
            self.fitting_method = 'polynomial'
            self.order = self.orderSpinBox.value()
        if self.powerRadioButton.isChecked():
            self.fitting_method = 'power'
        if self.movingRadioButton.isChecked():
            self.fitting_method = 'moving'
            self.cycle = self.cycleSpinBox.value()
        if self.otherRadioButton.isChecked():
            self.fitting_method = 'other' 
            self.other_function = self.otherComboBox.currentIndex()

        #else:
            #self.fitting_method = 'linear'



        self.right_extend = self.rightDoubleSpinBox.value()
        self.left_extend = self.leftDoubleSpinBox.value()
        self.reverse_aixs = self.reverseXYCheckBox.isChecked()
        self.sort_data = self.sortCheckBox.isChecked()
        self.intercept_set = self.interceptCheckBox.isChecked()
        if self.intercept_set:
            self.intercept = self.interceptLineEdit.value()
        

        self.close()        


#============================ 控制控件键可用与否 ================================

    def widget_vailable(self):

        self.orderLabel.setEnabled(0)
        self.orderSpinBox.setEnabled(0)
        self.cycleLabel.setEnabled(0)
        self.cycleSpinBox.setEnabled(0)
        self.interceptLineEdit.setEnabled(0)
        self.indexRadioButton.toggled.connect(self.opt_func)
        self.linearRadioButton.toggled.connect(self.opt_func)
        self.logarithmRadioButton.toggled.connect(self.opt_func)
        self.polynomialRadioButton.toggled.connect(self.opt_func)
        self.powerRadioButton.toggled.connect(self.opt_func)
        self.movingRadioButton.toggled.connect(self.opt_func)
        self.interceptCheckBox.clicked.connect(self.line_intercept_func)


    def opt_func(self):
        
        self.orderLabel.setEnabled(0)  # 默认无额外参数，可设置截距
        self.orderSpinBox.setEnabled(0)
        self.interceptCheckBox.setEnabled(1)
        self.interceptLineEdit.setEnabled(1)

        if self.polynomialRadioButton.isChecked():
            self.orderLabel.setEnabled(1)
            self.orderSpinBox.setEnabled(1)

        self.cycleLabel.setEnabled(0)
        self.cycleSpinBox.setEnabled(0)
        if self.movingRadioButton.isChecked():
            self.cycleLabel.setEnabled(1)
            self.cycleSpinBox.setEnabled(1)
            self.interceptCheckBox.setEnabled(0)
            self.interceptLineEdit.setEnabled(0)


        if self.logarithmRadioButton.isChecked():
            self.interceptCheckBox.setCheckState(0)
            self.interceptLineEdit.clear()
            self.interceptCheckBox.setEnabled(0)
            self.interceptLineEdit.setEnabled(0)

        if self.powerRadioButton.isChecked():
            self.interceptCheckBox.setEnabled(0)
            self.interceptLineEdit.setEnabled(0)


    def line_intercept_func(self):
        self.interceptLineEdit.setEnabled(0)
        if self.interceptCheckBox.isChecked():
            self.interceptLineEdit.setEnabled(1)

#============================================================================




